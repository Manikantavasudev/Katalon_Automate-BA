import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.WebDriver as WebDriver
import org.openqa.selenium.By as By
import com.kms.katalon.core.mobile.keyword.internal.MobileDriverFactory as MobileDriverFactory
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import com.kms.katalon.core.testobject.RequestObject as RequestObject
import com.kms.katalon.core.testobject.ResponseObject as ResponseObject
import com.kms.katalon.core.testobject.ConditionType as ConditionType
import com.kms.katalon.core.testobject.TestObjectProperty as TestObjectProperty
import com.kms.katalon.core.mobile.helper.MobileElementCommonHelper as MobileElementCommonHelper
import com.kms.katalon.core.util.KeywordUtil as KeywordUtil
CustomKeywords.'com.kazurayam.ksbackyard.CustomLoggerFactory.customizeLogger4CommentKeyword'()
//vif_file for path
String vif_file
//vif_file_data is retrieve the data from vif file
String vif_file_data
//private Map<String, List<Person>> vif_file_data = new HashMap<>()
//count of value
int count_of_value
//count of collection data
int count_of_collection
def datalist = []
def tempList = []
def count = 0


//Common verifier is verifing the value and attribute of data
def common_verifier(UI_data,UI_value,file){
	def return_of_value = verifier_attrib(UI_data,UI_value,file)
	def return_of_collection = verifier(UI_data,UI_value,file)
	return return_of_value || return_of_collection
}

//verifier attribute help to validate the attribute of vif file data
def verifier_attrib(UI_data,UI_value,file) {
	//Executing the python file for extracting the attribute from the vif file
	def task = [
		"C:\\GRL\\C2_Automation\\Python\\python.exe" ,
		"C:\\Users\\mvign\\git\\C2AutomationTest_Kat\\Test Cases\\Python_files\\Xml_Attrib_Reader.py",
		"$file"
	].execute()
	// assigning values from the output of python script
	def value_data = task.text
	task.waitFor()
	def temp
	def result_of_attrib = false
	temp = value_data.split(',');
	temp.eachWithIndex { item, index ->
		// `item` is the current element, while `index` is the index
		if (index<temp.length-1) {
			def emptyList = "$item".split("=")
			if (emptyList[1]!='{}') {
				def value_split = emptyList[1].split(":")
				if((emptyList[0].replaceAll("[\n\r]", "") == UI_data) && (value_split[1].replaceAll("'", "").replaceAll("\\}", "").replaceAll(" ", "") == UI_value)) {
					result_of_attrib = true
				}
			}
		}
	}
	return result_of_attrib
}
//verifier help to validate the data of vif file
def verifier(UI_data,UI_value,file) {
	def result = false
	//Executing the python file for extracting the data from the vif file
	def task = [
		"C:\\GRL\\C2_Automation\\Python\\python.exe" ,
		"C:\\Users\\mvign\\git\\C2AutomationTest_Kat\\Test Cases\\Python_files\\Xml_Value_Reader.py",
		"$file"
	].execute()
	def value = task.text
	task.waitFor()
	def splitList
	def tempList = value.split(',');
	tempList.eachWithIndex { item, index ->
		// `item` is the current element, while `index` is the index
		splitList = "$item".split("=")
		if(splitList[0].replaceAll("[\n\r]", "") == UI_data && splitList[1].replaceAll(" mA","").replaceAll(" mV","").replaceAll(" mW","").replaceAll(" hex","") == UI_value)
			result = true
	}
	return result
}



WebUI.openBrowser('')

WebUI.navigateToUrl('http://localhost:5001/')

WebUI.maximizeWindow()

'This step will call Common Data Reader Testcase and it will read the user provided json data'
Map all_data = WebUI.callTestCase(findTestCase('Common_Data_Reader/Test_Data_Reader'), [:], FailureHandling.STOP_ON_FAILURE)

String pc_c2_project_name = all_data.user_config_data.PC_C2_Project_Name

String pc_c2_vif_file_path = all_data.user_config_data.PC_C2_Vif_File_Path

String vif_file_expected_Popup_Content = all_data.user_config_data.PC_C2_Vif_File_Popup_Content

WebUI.click(findTestObject('Object Repository/Product_Capability_Objects/span_Product Capability'))

WebUI.callTestCase(findTestCase('xml_verifier/Test_Xml_File_Expander'), [:], FailureHandling.STOP_ON_FAILURE)

WebUI.delay(10)

WebDriver driver = DriverFactory.getWebDriver()

'To locate table'
WebElement Table = driver.findElement(By.xpath('//table[@id=\'vif-table\']//tbody'))

'To locate rows of table it will Capture all the rows available in the table'
List rows_table = Table.findElements(By.tagName('tr'))

'To calculate no of rows In table'
int rows_count = rows_table.size()

List cellvalue = []

List avoid_data = ['mA', 'mV', 'mW', 'hex']

//Loop:
//int row = 1; row <= rows_count+1; row++
'Loop will execute for all the rows of the table'
for (int row = 1; row <= rows_count; row++) {
	//int i=0
	'To locate columns(cells) of that specific row'

	//List Columns_row = rows_table.get(row).findElements(By.tagName('td'))
	'To calculate no of columns(cells) In that specific row'

	//int columns_count = Columns_row.size()
	'Loop will execute till the last cell of that specific row'
	for (int column = 1; column <= 2; column++) {
		'It will retrieve text from each cell'
		WebElement celltext_val = driver.findElement(By.xpath(((('//tbody[@id=\'vif-edit-table\']/tr[' + row) + ']/td[') +
				column) + ']'))

		println(celltext_val)

		String celltext = celltext_val.getText()

		println(celltext)

		if (celltext.equals('') || avoid_data.contains(celltext)) {
			try {
				WebElement celltextUpdated_val = driver.findElement(By.xpath(('//tbody[@id=\'vif-edit-table\']/tr[' + row) +
						']/td[2]/div/input'))

				def modified_celltext_val = celltextUpdated_val.getAttribute('value')

				println(modified_celltext_val)

				cellvalue.add(modified_celltext_val)
			}
			catch (Exception e) {
				celltext_null_val = ''

				cellvalue.add(celltext_null_val)
			}
		} else {
			cellvalue.add(celltext)
		}
	}
}

println(cellvalue)

println(cellvalue.size())

def new_xml_list = cellvalue.collate(2)

println(new_xml_list.size())

int xml_list_chunks = new_xml_list.size()

CustomKeywords.'vif_file_reader.VIF_File_Reader.main'([], pc_c2_vif_file_path)

//new_list.Split(",")
for (int k = 0; k < xml_list_chunks; k++) {
	def all_col_data = new_xml_list[k]

	if ((all_col_data[1]) != '') {
		println(all_col_data[0])

		println(all_col_data[1])

		def status = CustomKeywords.'vif_file_reader.VIF_File_Reader.common_verifier'(all_col_data[0], all_col_data[1])

		WebUI.comment((((('VIF_FILE DATA Verifier ' + (all_col_data[0])) + ' ') + (all_col_data[1])) + ' The Verification status is ') +
			status) //println(status) //def re_value = CustomKeywords.'vif_file_reader.VIF_File_Reader.common_verifier'(all_col_data[k], all_col_data[k+1]) //println(re_value)
	}
}


